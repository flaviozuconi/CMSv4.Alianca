@model MLModuloAniversariante
@{
    Layout = "";

    var portal = BLPortal.Atual;
    bool isEdicao = ViewBag.isEdicao != null ? Convert.ToBoolean(ViewBag.isEdicao) : false;
    var gruposcliente = (List<MLGrupoCliente>)ViewData["GruposCliente"] ?? new List<MLGrupoCliente>();
}
<link href="~/Content/js/plugins/datetimepicker/jquery.datetimepicker.css" rel="stylesheet" />
<script src="~/Content/js/plugins/datetimepicker/jquery.datetimepicker.js"></script>
<div class="form-group col-md-12">
    <label>@T("Título")</label>
    @Html.TextBoxFor(a => a.Titulo, new { @class = "form-control", maxlength = 50, placeholder = T("Título") })
</div>
<div class="form-group col-md-6">
    @Html.CheckBox("ListarMes", isEdicao ? Model.ListarMes.GetValueOrDefault() : true)
    <label for="ListarMes">@T("Listar Aniversariantes do Mês")</label>
</div>
<div class="form-group col-md-6">
    @Html.CheckBox("ModoCompacto", Model.ModoCompacto.GetValueOrDefault())
    <label for="ModoCompacto">@T("Modo Compacto")</label>
</div>
<div class="form-group col-md-6">
    <label>@T("Data Início")</label>
    @if ((isEdicao && Model.ListarMes.GetValueOrDefault()) || !isEdicao)
    {
        @Html.TextBoxFor(a => a.DataInicio, "{0:dd/MM/yyyy}", new { @class = "form-control data", autocomplete = "off", maxlength = 10, placeholder = T("Data Início"), disabled = "disabled" })
    }
    else
    {
        @Html.TextBoxFor(a => a.DataInicio, "{0:dd/MM/yyyy}", new { @class = "form-control data", autocomplete = "off", maxlength = 10, placeholder = T("Data Início") })
    }
</div>
<div class="form-group col-md-6">
    <label>@T("Data Término")</label>
    @if ((isEdicao && Model.ListarMes.GetValueOrDefault()) || !isEdicao)
    {
        @Html.TextBoxFor(a => a.DataTermino, "{0:dd/MM/yyyy}", new { @class = "form-control data", autocomplete = "off", maxlength = 10, placeholder = T("Data Término"), disabled = "disabled" })
    }
    else
    {
        @Html.TextBoxFor(a => a.DataTermino, "{0:dd/MM/yyyy}", new { @class = "form-control data", autocomplete = "off", maxlength = 10, placeholder = T("Data Término") })
    }
</div>
<div class="form-group col-md-12">
    <label>@T("Url da Página de Conteúdo/Detalhe")</label>
    @if (Model.ModoCompacto.GetValueOrDefault())
    {
        @Html.TextBoxFor(a => a.UrlListagem, new { @class = "form-control", maxlength = 100, placeholder = T("Digite para pesquisar") })
    }
    else
    {
        @Html.TextBoxFor(a => a.UrlListagem, new { @class = "form-control", maxlength = 100, placeholder = T("Digite para pesquisar"), disabled = "disabled" })
    }
    @Helpers.BuscarPaginas("UrlListagem", portal.Diretorio, portal.Codigo)
</div>
<div class="form-group col-md-6">
    <label>@T("Permissões")</label>
    <select name="Restrito" class="form-control">
        <option value="" @(!Model.Restrito.HasValue ? "selected" : "")>@T("Usar Permissões da Seção")</option>
        <option value="false" @(Model.Restrito.HasValue && !Model.Restrito.Value ? "selected" : "")>@T("Liberado")</option>
        <option value="true" @(Model.Restrito.HasValue && Model.Restrito.Value ? "selected" : "")>@T("Restrito")</option>
    </select>
</div>
<div class="form-group col-md-6">
    <label>@T("Quantidade em Destaque")</label>
    @if (Model.ModoCompacto.GetValueOrDefault())
    {
        @Html.TextBoxFor(a => a.QuantidadeDestaque, new { @class = "form-control", maxlength = 2, placeholder = T("Quantidade em Destaque"), onkeypress = "return somenteNumeros(event);" })
    }
    else
    {
        @Html.TextBoxFor(a => a.QuantidadeDestaque, new { @class = "form-control", maxlength = 2, placeholder = T("Quantidade em Destaque"), onkeypress = "return somenteNumeros(event);", disabled = "disabled" })
    }
</div>
<div class="form-group col-md-12 jqPermissao" style="display:@(Model.Restrito.HasValue && Model.Restrito.Value ? "block" : "none")">
    @if (gruposcliente.Count > 0)
    {
        for (int i = 0; i < gruposcliente.Count; i++)
        {
            <div class="form-group col-md-4">
                <input type="checkbox" id="CodigoGrupoCliente_@i" name="listaGrupoCliente" value="@gruposcliente[i].Codigo" @(!String.IsNullOrEmpty(Model.Grupos) && Model.Grupos.Split(',').Contains(Convert.ToString(gruposcliente[i].Codigo.GetValueOrDefault())) ? "checked" : "") /> @gruposcliente[i].Nome
            </div>
        }
    }
    else
    {
        <div class="alert alert-warning">
            @T("Não há grupos Cadastrados para esse portal!")
        </div>
    }
</div>
<script type="text/javascript">
    var settings = $('#propriedade').validate().settings;

    // Modify validation settings
    $.extend(true, settings, {
        rules: {
            DataInicio: { required: true },
            DataTermino: { greaterThan: '#DataInicio' }
        }
    });

    //Outras configurações
    $(document).ready(function () {
        $("#DataInicio").datetimepicker({
            timepicker: false, mask: true, format: 'd/m/Y', scrollMonth: false, scrollTime: false, scrollInput: false
        });
        $("#DataTermino").datetimepicker({
            timepicker: false, mask: true, format: 'd/m/Y', scrollMonth: false, scrollTime: false, scrollInput: false
        });

        $("#ListarMes").change(function () {
            if ($(this).prop("checked")) {
                $("#DataInicio").val("");
                $("#DataTermino").val("");
                $("#DataInicio").prop("disabled", "disabled");
                $("#DataTermino").prop("disabled", "disabled");
            }
            else {
                $("#DataInicio").removeAttr("disabled");
                $("#DataTermino").removeAttr("disabled");
            }
        });

        $("#ModoCompacto").change(function () {
            if ($(this).prop("checked")) {
                $("#UrlListagem").val("");
                $("#QuantidadeDestaque").val("");
                $("#UrlListagem").removeAttr("disabled");
                $("#QuantidadeDestaque").removeAttr("disabled");
            }
            else {
                $("#UrlListagem").prop("disabled", "disabled");
                $("#QuantidadeDestaque").prop("disabled", "disabled");
            }
        });

        $('select[name=Restrito]').on('change', function (event) {
            if ($(this).val() == 'true')
                $('.jqPermissao').show();
            else
                $('.jqPermissao').hide();
        });
    });

    $("#salvarModulo").click(function (evt) {
        //Nenhuma categoria foi selecionada
        var parent = $("#DataInicio").parent();

        if (!$("#ListarMes").prop("checked") && ($("#DataInicio").val().lengt == 0 || $("#DataTermino").val().length == 0)) {
            if (!parent.hasClass("has-error"))
                parent.addClass("has-error");

            parent.find(".help-block").remove();

            if (parent.find(".help-block").length == 0)
                parent.append("<span for=\"DataInicio\" class=\"help-block\">" + @T("Informar a data de início e a data de término") + "</span>");

            evt.stopImmediatePropagation();
        }
    });

    function toDate(valor) {
        if (!valor) {
            return "";
        }

        return new Date(valor.replace(/(\d{2})\/(\d{2})\/(\d{4}) (\d{2}):(\d{2})/, "$2/$1/$3 $4:$5"));
    }

    function removerMask(valor) {
        if (valor.indexOf("_") > -1) {
            return "";
        }

        return valor;
    }
</script>